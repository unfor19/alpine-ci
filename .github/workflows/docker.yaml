name: Push latest release to DockerHub

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"

env:
  DOCKER_USERNAME: unfor19 # for authentication
  DOCKER_ORG: unfor19
  DOCKER_REPO: alpine-ci
  VERSION_FILE_PATH: /opt/alpineci_version

jobs:
  dockerhub-latest:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - DOCKERFILE_PATH: Dockerfile
            DOCKER_BUILD_TARGET: alpine-ci
            DOCKER_TAG_ONLY: latest
          - DOCKERFILE_PATH: Dockerfile
            DOCKER_BUILD_TARGET: awscli
            DOCKER_TAG_ONLY: awscli-latest
    steps:
      - uses: actions/checkout@v2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Inject env vars
        run: |
          export DOCKER_TAG_LATEST=${DOCKER_ORG}/${DOCKER_REPO}:${{ matrix.DOCKER_TAG_ONLY }}
          export DOCKER_TAG_RELEASE=${DOCKER_ORG}/${DOCKER_REPO}:${{ matrix.DOCKER_TAG_ONLY }}-${GITHUB_SHA:0:8}
          echo "DOCKER_TAG_LATEST=${DOCKER_TAG_LATEST}" >> version
          echo "DOCKER_TAG_RELEASE=${DOCKER_TAG_RELEASE}" >> version
          cat version >> "$GITHUB_ENV"
      - name: Docker Build
        run: ci/build.sh ${{ matrix.DOCKER_BUILD_TARGET }}
      - name: Test
        run: |
          version_list=($(docker run --rm  --entrypoint cat "$DOCKER_TAG_RELEASE" "$VERSION_FILE_PATH"))
          echo -e "Version file in Docker container:\n${version_list[@]}\n\nEnd of version_list"
          if [[ ${#version_list} -gt 1 ]]; then
            echo "Success"
          else
            echo "Fail"
            exit 1
          fi
      - name: Push to DockerHub
        run: |
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username "$DOCKER_USERNAME" --password-stdin
          docker push "$DOCKER_TAG_LATEST" && docker push "$DOCKER_TAG_RELEASE"
          echo -e "\nPushed:\n${DOCKER_TAG_LATEST}\n${DOCKER_TAG_RELEASE}"
